" General {{{
set nocompatible
set history=700
set autoread

let mapleader = ","
let g:mapleader = ","
nmap <leader>w :w!<cr>

" }}}
" Plugins {{{

call plug#begin('~/.vim/plugged')

Plug 'editorconfig/editorconfig-vim'
Plug 'kien/ctrlp.vim'
Plug 'scrooloose/nerdtree'
Plug 'fatih/vim-go'
Plug 'scrooloose/syntastic'
Plug 'bling/vim-airline'
Plug 'ntpeters/vim-better-whitespace'
Plug 'tpope/vim-fugitive'
Plug 'pearofducks/ansible-vim'
Plug 'bogado/file-line'

call plug#end()
filetype plugin indent on

" Plugin setup
" Airline {{{
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline_powerline_fonts = 1
" }}}
" CtrlP {{{
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 0
" }}}
" Syntastic {{{
let g:syntastic_always_populate_loc_list = 1

let g:syntastic_cpp_compiler_options = "-std=c++14"
let g:syntastic_cpp_no_include_search = 1

let g:syntastic_python2_python_exe = "python2"
let g:syntastic_python3_python_exe = "python3"
let g:syntastic_python_default_version = g:syntastic_python3_python_exe
let g:syntastic_python2_checkers = ['python', 'pyflakes', 'pylint']
let g:syntastic_python3_checkers = ['python', 'pyflakes3', 'pylint3']

" Syntastic horribleness to make it detect python version properly based on shebang
function! Parse_Python_Shebang()
    let line = getline(1)
    if line =~# "\m^#!\s*[^ \t]*\<python2\=\>"
        let g:syntastic_python_python_exec = g:syntastic_python2_python_exe
        let g:syntastic_python_checkers = g:syntastic_python2_checkers
    elseif line =~# "\m^#!\s*[^ \t]*\<python3\>"
        let g:syntastic_python_python_exec = g:syntastic_python3_python_exe
        let g:syntastic_python_checkers = g:syntastic_python3_checkers
    else
        let g:syntastic_python_python_exec = g:syntastic_python_default_version
        let g:syntastic_python_checkers = g:syntastic_python_default_version =~# "\<python3$" ?
            \ g:syntastic_python3_checkers : g:syntastic_python2_checkers
    endif
endfunction

command! SyntasticPython2 let g:syntastic_python_python_exec = g:syntastic_python2_python_exe |
    \ let g:syntastic_python_checkers = g:syntastic_python2_checkers
command! SyntasticPython3 let g:syntastic_python_python_exec = g:syntastic_python3_python_exe |
    \ let g:syntastic_python_checkers = g:syntastic_python3_checkers

autocmd BufWinEnter *.py call Parse_Python_Shebang()

let g:syntastic_go_checkers = ['go', 'govet', 'errcheck']
" }}}
let g:go_list_type = "quickfix"

autocmd BufWritePre * StripWhitespace

" }}}
" Colours/Fonts {{{
syntax enable
colorscheme desert

if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set t_Co=256
    set guitablabel=%M\ %t
endif

set encoding=utf8
set ffs=unix,dos,mac

" }}}
" UI {{{
set so=7

set wildmenu " visual autocomplete for commands
set wildignore=*.o,*~,*.pyc

set ruler
set showcmd " Show command in bottom bar
set cursorline " Show currently selected line
set cmdheight=2
set hid
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

set lazyredraw " only redraw when need to
set magic

set mat=2

set number
set relativenumber

" }}}
" Searching {{{
set ignorecase
set smartcase
set incsearch " search as characters entered
set hlsearch " highlight results
set showmatch " highlight matching [{()}]
" turn off search highlight
nnoremap <leader>/ :nohlsearch<CR>

vnoremap <silent> # :call VisualSelection('b')<CR>

" }}}
" Folding {{{
set foldenable
set foldlevelstart=10 " open most folds by default
set foldnestmax=10
set foldmethod=indent " fold based on indent level

" }}}
" Files {{{
set nobackup
set nowb
set noswapfile

if v:version >= 703
    set undodir=~/.vim/undofiles
    set undofile

    set colorcolumn=+1
endif

" }}}
" Identing {{{
set smarttab " Tabs are best indent
set shiftwidth=4
set tabstop=4
set softtabstop=4
set lbr
set tw=500
set autoindent
set smartindent

" Settings for other filetypes
augroup configgroup
	" Golang gets set by vim-go
	autocmd Filetype cucumber setlocal tabstop=2 shiftwidth=2 expandtab
	autocmd Filetype html setlocal tabstop=2 shiftwidth=2 expandtab
	autocmd Filetype javascript setlocal tabstop=2 shiftwidth=2 expandtab
	autocmd Filetype json setlocal tabstop=2 shiftwidth=2 expandtab
	autocmd Filetype lua setlocal expandtab
	autocmd Filetype php setlocal expandtab
	autocmd Filetype python setlocal expandtab
	autocmd Filetype ruby setlocal tabstop=2 shiftwidth=2 expandtab
	autocmd Filetype yaml setlocal tabstop=2 shiftwidth=2 expandtab
augroup END

" }}}
" Movement {{{

" Move by virtual line without a count
noremap <silent> <expr> j !v:count ? 'gj' : 'j'
noremap <silent> <expr> k !v:count ? 'gk' : 'k'

" Switch windows with ctrl + hjkl
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" | or _ for splits
nnoremap <expr><silent> \| !v:count ? "<C-W>v<C-W><Right>" : '\|'
nnoremap <expr><silent> _  !v:count ? "<C-W>s<C-W><Down>"  : '_'

" Cycle through splits
nmap <Tab> <C-W>w
nmap <S-Tab> <C-W>W

" }}}
" Statusline {{{
set laststatus=2
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %c,%l/%L\ %P

function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

" }}}
" vim:foldmethod=marker:foldlevel=0
